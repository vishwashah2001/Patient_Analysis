/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.Encounter;
import model.EncounterHistory;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.Sys;
import model.VitalSign;
import utility.UtilityFunctions;

/**
 *
 * @author vishwashah
 */
public class AddPatient extends javax.swing.JPanel {

     /**
     * Creates new form viewPatientDirectory
     */
    PatientDirectory patient_dir;
    EncounterHistory en_history;
    EncounterHistory ab_enc;
    PatientDirectory ab_patient;
    public AddPatient(PatientDirectory patientDirectory, EncounterHistory encounterHistory,PatientDirectory abnormalPatients, EncounterHistory abnormalEncounters) {
        initComponents();
        this.patient_dir = patientDirectory;
        this.en_history = encounterHistory;
        this.ab_enc = abnormalEncounters;
        this.ab_patient = abnormalPatients;
        populateTable();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDirectory = new javax.swing.JTable();
        jPatientDatabase = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnViewHistory = new javax.swing.JButton();
        btnAddVitals = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatientHistory = new javax.swing.JTable();
        lblBloodPressure = new javax.swing.JLabel();
        lblRespiratoryRate = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        txtRespiratoryRate = new javax.swing.JTextField();
        btnSaveDetials = new javax.swing.JButton();
        lblPatID = new javax.swing.JLabel();
        lblTxtPatID = new javax.swing.JLabel();
        lblBloodPressureError = new javax.swing.JLabel();
        lblRespiratoryRateError = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        tblPatientDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "First Name", "Last Name", "Age", "City", "Community", "House Number"
            }
        ));
        jScrollPane1.setViewportView(tblPatientDirectory);

        jPatientDatabase.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jPatientDatabase.setText("Patient Details");

        jButton1.setText("Cancel Appoinment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnViewHistory.setText("View History");
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });

        btnAddVitals.setText("Add Vitals");
        btnAddVitals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVitalsActionPerformed(evt);
            }
        });

        tblPatientHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter No", "Blood Pressure", "Respiratory Rate"
            }
        ));
        jScrollPane2.setViewportView(tblPatientHistory);

        lblBloodPressure.setText("Blood Pressure:");

        lblRespiratoryRate.setText("Respiratory Rate:");

        txtBloodPressure.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBloodPressureKeyReleased(evt);
            }
        });

        txtRespiratoryRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRespiratoryRateActionPerformed(evt);
            }
        });
        txtRespiratoryRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRespiratoryRateKeyReleased(evt);
            }
        });

        btnSaveDetials.setText("Save");
        btnSaveDetials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDetialsActionPerformed(evt);
            }
        });

        lblPatID.setText("Patient ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(377, 377, 377)
                        .addComponent(jPatientDatabase))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBloodPressure)
                                    .addComponent(lblRespiratoryRate)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(lblPatID)))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBloodPressure, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                            .addComponent(txtRespiratoryRate)
                            .addComponent(lblTxtPatID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addComponent(lblRespiratoryRateError, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSaveDetials)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(63, 63, 63)
                        .addComponent(btnViewHistory)
                        .addGap(57, 57, 57)
                        .addComponent(btnAddVitals))
                    .addComponent(lblBloodPressureError, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(325, 325, 325))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPatientDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnViewHistory)
                    .addComponent(btnAddVitals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBloodPressure)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBloodPressureError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRespiratoryRate)
                    .addComponent(txtRespiratoryRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRespiratoryRateError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPatID)
                    .addComponent(lblTxtPatID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(btnSaveDetials)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        
        if(selectedRowIndex<0){
          JOptionPane.showMessageDialog(this, "Select the Patient to view history");  
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        //System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        DefaultTableModel tblPatientHistoryModel = (DefaultTableModel) tblPatientHistory.getModel();
        tblPatientHistoryModel.setRowCount(0);
        
        ArrayList<Encounter> list = getFilteredData(patient.getPatientid());
        
        
        for(Encounter encounter : list){    
            Object[] row = new Object[3];
            row[0] = encounter.getEncounterno();
            VitalSign vitalSign = encounter.getVitalSignList().get(0);
            row[1] = vitalSign.getBloodpressure();
            row[2] = vitalSign.getRespiratoryrate();
            tblPatientHistoryModel.addRow(row);
        }
        
    }//GEN-LAST:event_btnViewHistoryActionPerformed

    private void btnAddVitalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVitalsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddVitalsActionPerformed

    private void btnSaveDetialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDetialsActionPerformed
        // TODO add your handling code here:
        if(txtRespiratoryRate.getText().isBlank()|| txtRespiratoryRate.getText().isEmpty() 
                || txtBloodPressure.getText().isBlank() || txtBloodPressure.getText().isEmpty()){
              JOptionPane.showMessageDialog(this, "Vital Signs Cannot be Blank");
        
        
        }
        else{
        boolean patientYN;
        boolean isNormal;
        int encNo = 0;
        int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        //System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patientYN = isPatientPresent(patient.getPatientid());
        //System.out.println(patientYN);
        VitalSign vitalSign = new VitalSign();
        Encounter encounter = new Encounter();
        vitalSign.setRespiratoryrate(Double.parseDouble(txtRespiratoryRate.getText()));
        vitalSign.setBloodpressure(Double.parseDouble(txtBloodPressure.getText()));
        
        
        if(patientYN){
        encNo =  getEncNo(patient.getPatientid());
            encounter.setEncounterno(encNo+1);
        }else{
            encounter.setEncounterno(1);
        }
        
        encounter.setEncpatientid(patient.getPatientid());
        encounter.addVitalSign(vitalSign);
        en_history.addEncounterInList(encounter);
        
        isNormal = isNormal(patient.getPatientage(), vitalSign.getBloodpressure(),vitalSign.getRespiratoryrate());
        
        if (!isNormal){
            ab_patient.addNewPatient(patient);
            ab_enc.addEncounterInList(encounter);
        
        }
        JOptionPane.showMessageDialog(this,"Saved successfully.");
        //System.out.println(en_history.getEncounterHistoryList().get(0));
        
       }
    }//GEN-LAST:event_btnSaveDetialsActionPerformed

    private void txtBloodPressureKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBloodPressureKeyReleased
        // TODO add your handling code here:
         String PATTERN = "^[0-9]{2,3}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtBloodPressure.getText());
        if(!match.matches()){
            lblBloodPressureError.setText("Blood Pressure Should be 2 to 3 digits");
        }else{
            lblBloodPressureError.setText("");
        }
    }//GEN-LAST:event_txtBloodPressureKeyReleased

    private void txtRespiratoryRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRespiratoryRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRespiratoryRateActionPerformed

    private void txtRespiratoryRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRespiratoryRateKeyReleased
        // TODO add your handling code here:
          String PATTERN = "^[0-9]{2}";
        Pattern pat = Pattern.compile(PATTERN);
        Matcher match = pat.matcher(txtRespiratoryRate.getText());
        if(!match.matches()){
            lblRespiratoryRateError.setText("Respiratory Rate Should be 2 digits");
        }else{
            lblRespiratoryRateError.setText("");
        }
    }//GEN-LAST:event_txtRespiratoryRateKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
             int selectedRowIndex = tblPatientDirectory.getSelectedRow();
        if(selectedRowIndex<0){
          JOptionPane.showMessageDialog(this, "Select the Patient to cancel appoinment");  
        }
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        //System.out.println(model.getValueAt(selectedRowIndex, 0));
        Patient patient = (Patient) model.getValueAt(selectedRowIndex , 0);
        patient_dir.getPatientList().remove(selectedRowIndex);
        populateTable();
        JOptionPane.showMessageDialog(this, "Appointment Cancelled");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVitals;
    private javax.swing.JButton btnSaveDetials;
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jPatientDatabase;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblBloodPressureError;
    private javax.swing.JLabel lblPatID;
    private javax.swing.JLabel lblRespiratoryRate;
    private javax.swing.JLabel lblRespiratoryRateError;
    private javax.swing.JLabel lblTxtPatID;
    private javax.swing.JTable tblPatientDirectory;
    private javax.swing.JTable tblPatientHistory;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtRespiratoryRate;
    // End of variables declaration//GEN-END:variables
private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatientDirectory.getModel();
        model.setRowCount(0);
        for (Patient patient: patient_dir.getPatientList()){
        Object[] row = new Object[7];
        row[0] = patient;
        row[1] = patient.getPatientfirstname();
        row[2] = patient.getPatientlastname();
        row[3] = patient.getPatientage();
        row[4] = patient.getPatientcity();
        row[5] = patient.getPatientcommunity();
        row[6] = patient.getPatienthouse();
        model.addRow(row);
    }
}

    private boolean isPatientPresent(int patientId) {
        boolean present = false;
        for(Encounter encounter : en_history.getEncounterHistoryList()){
        if(encounter.getEncpatientid()== patientId){
            present = true;
        }
        else{
            present = false;
        }
        }
       return present;
    }

    private int getEncNo(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : en_history.getEncounterHistoryList()){
        if(enc.getEncpatientid() == patientId){
        result.add(enc);
            }
        }
        
        Encounter enc = result.get(result.size()-1);
        return enc.getEncounterno();
            
    }

    private ArrayList<Encounter> getFilteredData(int patientId) {
        var result = new ArrayList<Encounter>();
        for(Encounter enc : en_history.getEncounterHistoryList()){
        if(enc.getEncpatientid()== patientId){
        result.add(enc);
            }
        }
        return result;
        
    }

    private boolean isNormal(int patAge, double bloodpressure, double respiratoryrate) {
        boolean isNorm = false;
        if(patAge <= 40){
            if((bloodpressure>= 130 || bloodpressure<=90) || (respiratoryrate >= 100 ||  respiratoryrate<=90)){
            isNorm = false;
            }
            else{
            isNorm = true;
            }
            
        }
        else if (patAge >= 41 && patAge <= 100){
            if((bloodpressure>= 140 || bloodpressure<=100) || (respiratoryrate >= 80 || respiratoryrate<=70)){
            isNorm=  false;
            }
            else{
            isNorm = true;
            }
        }
        return isNorm;
        
    }
    
}
